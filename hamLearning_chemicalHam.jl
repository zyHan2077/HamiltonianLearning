import Distributions.Normal
using Distributed
include("./utils.jl")
include("./noisy_oracle.jl")
include("./hamsGen.jl")
using LinearAlgebra, Statistics, .hamLearning_utils, .noisyOracle
using FileIO, JSON


function printboth(s, fs)
    maps = (k) -> (haskey(s, k) ? s[k] : nothing)
    mapfs = (k) -> (haskey(fs, k) ? fs[k] : nothing)
    ks = union(keys(s), keys(fs))
    for k in ks
        println(k, "=>", "(", maps(k), ", ", mapfs(k), ")")
    end
end

function parameterDis(s, s_re)
    maps = (k) -> (haskey(s, k) ? s[k] : 0.0)
    mapsre = (k) -> (haskey(s_re, k) ? s_re[k] : 0.0)
    ans = 0.0
    for key in union(keys(s), keys(s_re))
        ans+=abs(maps(key) - mapsre(key))
    end
    idea=0.0
    for (key,val) in s
       idea+= abs(val)
    end
    return (ans)/(idea)
end


s = Dict(
    # 1  =>  -2.7104083700726536 , # const in the Hamiltonian has no effect
    3073  =>  -1.745198975210092 ,
    769  =>  -1.2726305026333158 ,
    3841  =>  0.5647364031520397 ,
    193  =>  -0.12777587071339788 ,
    3265  =>  0.484399127629246 ,
    961  =>  0.41584938456426535 ,
    49  =>  -1.745198975210092 ,
    3121  =>  0.7823637778985213 ,
    817  =>  0.6659936243343323 ,
    241  =>  0.5389855881574944 ,
    13  =>  -1.272630502633316 ,
    3085  =>  0.6659936243343323 ,
    781  =>  0.7400280578673019 ,
    205  =>  0.5684250585068191 ,
    61  =>  0.5647364031520397 ,
    4  =>  -0.12777587071339735 ,
    3076  =>  0.5389855881574944 ,
    772  =>  0.5684250585068191 ,
    196  =>  1.0024488587320461 ,
    52  =>  0.484399127629246 ,
    16  =>  0.41584938456426535 ,
    321  =>  0.3806607628552998 ,
    3393  =>  -0.029793806500249334 ,
    641  =>  0.3806607628552998 ,
    3713  =>  -0.029793806500249334 ,
    369  =>  -0.09039934735000948 ,
    689  =>  -0.09039934735000948 ,
    333  =>  -0.036634285428473336 ,
    653  =>  -0.036634285428473336 ,
    324  =>  0.22383338673048747 ,
    644  =>  0.22383338673048747 ,
    1301  =>  0.10125722118229263 ,
    2581  =>  0.10125722118229263 ,
    1321  =>  0.10125722118229263 ,
    2601  =>  0.10125722118229263 ,
    1877  =>  0.06060554084976015 ,
    2965  =>  0.06060554084976015 ,
    1897  =>  0.06060554084976015 ,
    2985  =>  0.06060554084976015 ,
    1310  =>  0.06060554084976015 ,
    2590  =>  0.06060554084976015 ,
    1327  =>  0.06060554084976015 ,
    2607  =>  0.06060554084976015 ,
    1886  =>  0.05458646052824838 ,
    2974  =>  0.05458646052824838 ,
    1903  =>  0.05458646052824838 ,
    2991  =>  0.05458646052824838 ,
    6  =>  0.38066076285529965 ,
    3078  =>  -0.09039934735000948 ,
    774  =>  -0.036634285428473336 ,
    198  =>  0.22383338673048747 ,
    54  =>  -0.029793806500249334 ,
    11  =>  0.38066076285529965 ,
    3083  =>  -0.09039934735000948 ,
    779  =>  -0.036634285428473336 ,
    203  =>  0.22383338673048747 ,
    59  =>  -0.029793806500249334 ,
    326  =>  0.15257567394255375 ,
    646  =>  0.15257567394255375 ,
    331  =>  0.15257567394255375 ,
    163  =>  0.15257567394255375 ,
)

s_H4_R2 = Dict{Any, Any}(797 => 0.1440456358083336, 60 => 0.4735193178192666, 41120 => 0.437093220352425, 40965 => -0.4208170378108106, 3188 => 0.03771177465111815, 20670 => -0.07557127814715206, 3256 => 0.03771177465111815, 5245 => -0.25987765579003635, 12 => 0.5634048336006457, 68 => -0.13786061901663552, 5200 => -0.18194810734225209, 1285 => 0.41160898164241166, 2565 => 0.41160898164241166, 12334 => -0.044760289488082736, 49152 => -0.16945401835691418, 29699 => -0.14960200141507662, 32125 => 0.30836715600068026, 116 => 0.06534747723328369, 29880 => 0.3299415686978868, 195 => 0.5965093095394889, 49268 => -0.1570686946208013, 20605 => -0.07557127814715206, 34816 => -0.13786061901663552, 29888 => -0.1570686946208013, 32020 => -0.25987765579003635, 2570 => 0.41160898164241166, 42240 => -0.09825848011422775, 61440 => 0.3996643554213153, 49155 => 0.9048764655401692, 1320 => 0.174264194374727, 46 => 0.05271935535833855, 10400 => -0.18194810734225209, 12291 => 0.8053638725322874, 170 => -0.16093938202077426, 47104 => 0.06534747723328371, 29744 => 0.04408748832561657, 47133 => -0.3225585576965828, 238 => 0.07382157393958905, 47872 => -0.07360412411219544, 5130 => 0.174264194374727, 47116 => 0.03771177465111815, 184 => 0.06534747723328369, 48660 => -0.25987765579003635, 32040 => -0.25987765579003635, 11960 => -0.3225585576965828, 3264 => 0.8260407015746779, 20500 => -0.18194810734225209, 29725 => -0.3225585576965828, 165 => -0.09825848011422775, 48720 => -0.07557127814715206, 136 => -0.13786061901663552, 38400 => -0.06268090190654646, 12288 => 0.2007839391563384, 49336 => -0.1570686946208013, 41000 => -0.18194810734225209, 7472 => -0.044760289488082736, 1300 => 0.174264194374727, 49164 => 0.8260407015746779, 21760 => -0.16093938202077426, 12472 => 0.04408748832561657, 2640 => -0.4208170378108106, 48645 => 0.07599787730288117, 1290 => 0.41160898164241166, 11805 => 0.31945370598246525, 56576 => 0.07382157393958905, 32080 => -0.07557127814715206, 3101 => -0.04356817085725384, 10320 => -0.18194810734225209, 11822 => 0.31945370598246525, 240 => 0.3996643554213153, 11824 => -0.044760289488082736, 3120 => 0.8374969499673378, 5140 => 0.36397763214807116, 41150 => -0.07557127814715206, 30464 => -0.07360412411219544, 47150 => -0.3225585576965828, 47296 => -0.1570686946208013, 48680 => -0.25987765579003635, 4352 => 0.13069602351747317, 29 => 0.05271935535833855, 10430 => -0.25987765579003635, 2720 => -0.4208170378108106, 10245 => 0.174264194374727, 105 => -0.06268090190654646, 7424 => 0.05271935535833856, 17 => 0.13069602351747317, 2685 => 0.07599787730288117, 40980 => -0.18194810734225209, 960 => 0.9048764655401692, 10260 => 0.36397763214807116, 51 => 0.48591016654982216, 12480 => 0.8367575757737402, 48 => 0.20078393915633597, 15 => 0.38615769660813287, 1470 => 0.07599787730288117, 48830 => 0.30836715600068026, 40970 => -0.4208170378108106, 1440 => -0.4208170378108106, 20560 => 0.437093220352425, 2600 => 0.174264194374727, 11776 => 0.05271935535833856, 49344 => 0.9450499680182862, 90 => -0.09825848011422775, 7453 => 0.31945370598246525, 10365 => -0.25987765579003635, 816 => 0.8053638725322874, 7540 => -0.3225585576965828, 12317 => -0.044760289488082736, 17408 => -0.13786061901663552, 52224 => 0.4960991328767911, 15360 => 0.4735193178192666, 85 => -0.16093938202077426, 119 => -0.07360412411219544, 43520 => -0.16093938202077426, 48800 => -0.07557127814715206, 7608 => -0.3225585576965828, 11892 => -0.3225585576965828, 187 => -0.07360412411219544, 29812 => 0.3299415686978868, 7616 => 0.14939285208674108, 5280 => -0.18194810734225209, 3084 => 0.8308559592066898, 3075 => 0.7977666782505445, 32005 => 0.07599787730288117, 32160 => -0.07557127814715206, 5160 => 0.36397763214807116, 48765 => 0.30836715600068026, 7436 => -0.04356817085725384, 32010 => 0.07599787730288117, 768 => 0.8161970009041819, 1360 => -0.4208170378108106, 20640 => 0.437093220352425, 884 => -0.14960200141507662, 29708 => 0.03771177465111815, 20485 => -0.4208170378108106, 47220 => 0.3299415686978868, 11779 => 0.1440456358083336, 5310 => -0.25987765579003635, 60928 => 0.07382157393958905, 12404 => 0.04408748832561657, 8704 => 0.13069602351747317, 41085 => -0.07557127814715206, 29696 => 0.06534747723328371, 11788 => -0.04356817085725384, 10280 => 0.36397763214807116, 11968 => 0.14939285208674108, 780 => 0.7977666782505445, 150 => -0.06268090190654646, 1405 => 0.07599787730288117, 3072 => 0.5634048336006436, 952 => -0.14960200141507662, 29742 => -0.3225585576965828, 204 => 0.4960991328767911, 47288 => 0.3299415686978868, 7427 => 0.1440456358083336, 34 => 0.13069602351747317, 49200 => 0.8367575757737402, 20490 => -0.4208170378108106, 13056 => 0.48591016654982216, 26880 => -0.06268090190654646, 2580 => 0.174264194374727, 41040 => 0.437093220352425, 3840 => 0.38615769660813287, 12336 => 0.8535146472625942, 7470 => 0.31945370598246525, 49181 => 0.14939285208674108, 48650 => 0.07599787730288117, 3118 => -0.04356817085725384, 814 => 0.1440456358083336, 2750 => 0.07599787730288117, 23040 => -0.09825848011422775, 192 => -0.16945401835691687, 12300 => 0.8374969499673378, 32190 => 0.30836715600068026, 20520 => -0.18194810734225209, 47107 => -0.14960200141507662, 221 => 0.07382157393958905, 49198 => 0.14939285208674108, 3 => 0.816197000904183, 5125 => 0.174264194374727, 47152 => 0.04408748832561657, 49920 => 0.5965093095394889, 10250 => 0.174264194374727, 771 => 0.8762045273975104)

s_H3_R2 = Dict{Any, Any}(5 => -0.004060565180113521, 797 => -0.05550399964870562, 1283 => -0.001861041866192606, 60 => 0.27685492687499474, 778 => -0.003181219680997364, 325 => 1.537014578319664e-5, 660 => -1.4785154118668309e-5, 650 => 1.537014578319664e-5, 197 => 0.0024905296881690847, 808 => 0.004359551379726039, 3112 => -0.0019289000783717872, 320 => -0.004060565180113521, 2600 => 1.996450453923942e-5, 3082 => 0.002540637806171171, 1300 => 1.996450453923942e-5, 2752 => -0.0005798260907140766, 2606 => -0.0017179196238196982, 1328 => -0.0019289000783717872, 2608 => -0.0019289000783717872, 780 => 1.9364871272383846, 816 => 0.2768748913795339, 640 => -0.004060565180113521, 2956 => -0.05550399964870562, 58 => 0.000822718182351473, 3072 => 0.06648194936189622, 12 => 0.39585657798400314, 2973 => 0.6478408468915318, 1472 => -0.0005798260907140766, 23 => -0.0005798260907140766, 669 => 0.0012812157754785295, 43 => -0.0005798260907140766, 1285 => -1.478515411866831e-5, 204 => 0.2746514839299465, 1290 => -1.478515411866831e-5, 2565 => -1.478515411866831e-5, 2949 => 0.0012812157754785295, 1088 => -0.05551878480282428, 643 => 0.0024905296881690847, 3101 => -1.1120495900311817e-5, 232 => -0.001861041866192606, 34 => -0.05551878480282428, 773 => -0.003181219680997364, 2964 => -0.0017179196238196982, 680 => -1.4785154118668309e-5, 788 => 0.004359551379726039, 1280 => -0.004863358440287017, 240 => 1.2979953902320989, 1856 => 3.649456220682477e-6, 366 => 0.0012812157754785295, 3120 => 1.3366555522874932, 10 => -0.004060565180113521, 3392 => 0.000822718182351473, 202 => 0.0024905296881690847, 20 => -0.004863358440287014, 195 => 1.273646292473603, 652 => -0.003181219680997364, 2580 => 1.996450453923942e-5, 349 => 0.0012812157754785295, 340 => -1.4785154118668309e-5, 3840 => 0.27685492687499474, 1902 => 0.6478408468915318, 2570 => -1.478515411866831e-5, 368 => 0.002540637806171171, 3084 => 0.2768748913795339, 1859 => -7.462464584108829e-6, 3075 => 1.2979953902320989, 2944 => 3.649456220682477e-6, 2563 => -0.001861041866192606, 2947 => -7.462464584108829e-6, 2954 => 0.0012812157754785295, 1904 => -1.1120495900311817e-5, 29 => 3.6494562207075795e-6, 1320 => 1.996450453923942e-5, 3118 => -1.1120495900311817e-5, 814 => -0.05550399964870562, 3077 => 0.002540637806171171, 46 => 3.6494562207075795e-6, 212 => -0.001861041866192606, 1861 => 0.0012812157754785295, 1868 => -0.05550399964870562, 1896 => -0.0017179196238196982, 2990 => 0.6478408468915318, 645 => 1.537014578319664e-5, 332 => -0.003181219680997364, 3092 => -0.0019289000783717872, 1292 => 0.004359551379726039, 323 => 0.0024905296881690847, 192 => 0.6728056780207394, 360 => -1.4785154118668309e-5, 238 => -7.462464584108829e-6, 2572 => 0.004359551379726039, 221 => -7.462464584108829e-6, 2984 => -0.0017179196238196982, 17 => -0.05551878480282428, 2176 => -0.05551878480282428, 53 => 0.000822718182351473, 768 => 0.39585657798400314, 2992 => -1.1120495900311817e-5, 1876 => -0.0017179196238196982, 2560 => -0.004863358440287017, 2589 => -0.0017179196238196982, 688 => 0.002540637806171171, 686 => 0.0012812157754785295, 3 => 0.6728056780207387, 960 => 0.2746361137841633, 51 => 0.6501545433405673, 1885 => 0.6478408468915318, 1309 => -0.0017179196238196982, 1866 => 0.0012812157754785295, 3264 => 0.6501545433405673, 40 => -0.004863358440287014, 48 => 0.06648194936189525, 3712 => 0.000822718182351473, 1326 => -0.0017179196238196982, 15 => 0.2746361137841633, 330 => 1.537014578319664e-5, 771 => 0.2746514839299465)

verbose = parse(Bool, ARGS[1])


params = Dict(
    "Cutoff"=>0.995,
    "Zerosensitivity"=>4e-3,
    "noise"=>0.001,
    "largeEnoughOffset"=>100,
    "single"=>4e-2,
    "phase2Lines"=>200
);

A = params["largeEnoughOffset"]

# totalHams = 50
eachRounds = 200


params = Dict(
    "Cutoff"=>0.995,
    "Zerosensitivity"=>20e-3,
    "noise"=>0.001,
    "largeEnoughOffset"=>100,
    "single"=>4e-2,
    "phase2Lines"=>200
);
s = s_H3_R2
n = 6

for b in 2:7
    savingItems = []
    ave=0.0
    failCount = 0
    push!(savingItems, s);
    ham0, oracle_f = construct_oracle_f(s, n, params["noise"])
    # real oracle being actually used
    function fOracle(k)
        if haskey(F,k)
            return F[k]
        end
        global totalCall = totalCall + 1
        F[k] = oracle_f(k+1) + A
        return F[k]
    end
    oracle_s = construct_oracle_s(ham0, n, params["noise"])

    function sOracle(β, γ)
        global totalCall2 = totalCall2 + 1
        return oracle_s(β, γ)
    end

    mainProc = hamLearningProc(n)
    for i=1:eachRounds
        global F = Dict()
        # t = [j*0.01 for j=1:timeSteps]
        # global X = [ones(timeSteps) t.^2];
        # global Ut = exp.(-1im * fill(ham0, timeSteps) .* t);
        # global UtDagger = conj.(transpose.(Ut));
        # totalCall = 0
        estimateCalls = 4^n
        global totalCall = 0
        global totalCall2 = 0
        # progbar = Progress(estimateCalls, desc="sample")
        try
            global ps_re = mainProc.dopeel(b, fOracle, params, 3, 10, verbose)
            # ps_re = doPeel(4, fOracle2, params, 3,10)
            if verbose
                println("=======================")
            end
        
            nonZeroAlphas = filter!(x->x≠0, [a for a in keys(ps_re)])

            global s_re = pauliparametersReconstruction(nonZeroAlphas, params["phase2Lines"], sOracle)
            if verbose
                println("total Calls to oracle at round ", i, " with qubit ",n ,": " ,totalCall+totalCall2)
            end
            global fs = reconstructedParameters(ps_re, s_re)
        catch
            println("error in do peel")
            failCount += 1
            i = i-1
            continue
        end
        if verbose
            printboth(s, fs)
            println("distance at round ", i ,": ",parameterDis(s,fs))
            println("=======================")
        end
        ave += parameterDis(s,fs)
        push!(savingItems, (fs, totalCall, totalCall2))
    end
    ave /= (eachRounds)
    println("average error: ", ave)
    println("fail rate ", failCount/(eachRounds))
    
    open("./data/H3Rounds=200_b="*string(b)*".json", "w") do f
        JSON.print(f, savingItems, 4)
    end
end

# println(savingItems)